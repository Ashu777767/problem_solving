#include <bits/stdc++.h>

#include<iostream>

using namespace std;
void merge(int * arr, int s, int e) {
    int mid = s + (e - s) / 2;
    // int start2 = mid + 1;
    // if (arr[mid] <= arr[start2])
    //     return;
    // int val, index;
    // while (s <= mid && start2 <= e)
    // {
    //     if (arr[s] <= arr[start2]) {
    //         s++;
    //     }
    //     else {
    //         val = arr[start2];
    //         index = start2;


    //         while (index != s) {
    //             arr[index] = arr[index - 1];
    //             index--;
    //         }
    //         arr[s] = val;

            // s++;
            // mid++;
            // start2++;
    //     }
    // }
    
    //this was inplace and down is using one tempoprary array
    int len1 = mid-s+1;
    int len2 = e-mid;
    int *temp = new int[e-s+1];
    int i = s;
    int j = mid+1;
    int k = 0;
    while(i<=mid && j<=e){
        if(arr[i]<=arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
        }
    }
    while(i<=mid){
        temp[k++] = arr[i++];
    }
    while(j<=e){
        temp[k++] = arr[j++];
    }
     for(int p = 0;p<k;p++){
         arr[s+p] = temp[p];
     }
    delete [] temp;
    
}
void mergesort(int * arr, int s, int e) {

    if (s >= e) {
        return;
    }
    int mid = s + (e - s) / 2;
    mergesort(arr, s, mid);
    //right
    mergesort(arr, mid + 1, e);
    // sort and merge araays
    merge(arr, s, e);
}

int main() {
    int arr[] = {
        3,
        1,
        4,
        2,
        7,
        6,
        3,
        17,
        10
    };
    int n = 9;
    mergesort(arr, 0, n - 1);
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }


}
