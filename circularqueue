#include <bits/stdc++.h>
using namespace std;
class CircularQueue{
    int* arr;
    int currSize,cap;
    int f;
    int r;
public:
    CircularQueue(int size){ //constructor
        cap = size;
        arr = new int[cap];
        currSize = 0;
        f = 0;  // here we can keep at -1 but then we need to modify according to that so we generally take it as 0 because it returns the first node only
        r = -1; //so we move rear to index 0 when a element is needed to be pushed and include the value;
    }
    void push(int val)
    {
        if(currSize == cap){
            cout<<"quueue is full\n";
            return ;
        }
        r = (r+1)%cap;
        arr[r] = val;
        currSize++;
    }
    void pop(){
        if(currSize == 0){
            cout<<"the queue is empty\n";
            return ;
        }
        f = (f+1)%cap;
        currSize--;
        
    }
    int front()
    {
        return arr[f];
    }
    bool empty(){
        return currSize == 0;
    }
    void printArr(){
        for(int i = 0;i<cap;i++){
            cout<<arr[i]<<" ";
            
        }
    }
    
};
int main() {
	CircularQueue cq(3);
	cq.push(1);
	cq.push(2);
	cq.push(3);  
	cq.pop();  //empties the values at first index 
	cq.push(4);   //pushes the value at first index 
	cq.printArr();   //output prints ans arr will be 4 2 3
	cout<<"the circular queue output is:"<<endl;
	while(!cq.empty()){
	    cout<<cq.front()<<" ";
	     cq.pop();
	}
	
return 0;
}
