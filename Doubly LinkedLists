#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node*next;
    Node*prev;
    
    Node(int val){ //constructor
        data = val;
        next = NULL;
        prev= NULL;
    }
};
class Doublyll{
    Node* head;
    Node* tail;
public:
      Doublyll(){        //constructor
          head = tail = NULL;
      }
      //push_front a node
      void push_front(int val){
          Node* newNode = new Node(val);
          if(head == NULL){
              head = tail = newNode;
              return;
          }
          newNode->next = head;
          head->prev=  newNode;
          head = newNode;
          
      }
      void push_back(int val){
          Node* newNode = new Node(val);
          if(tail == NULL){
              head = tail = newNode;
              return;
          }
          tail->next = newNode;
          newNode->prev = tail;
          tail = newNode;
      }
      
      //pop funtions
      void pop_front(){
          //edge case
          if(head == NULL){
              cout<<"list is Null\n";
              return;
          }
          Node*temp = head;
          head = head->next;
          if(head != NULL){
              head->prev = NULL;
          }
          temp->next = NULL;
          delete temp;
          
      }
      void pop_back(){
          if(tail == NULL){
              cout<<"lsit is empty\n";
              return;
          }
          Node* temp = tail;
          tail = tail->prev;
          if(tail!=NULL){      //if more than one node else tail is directly pointing to NULL;
              tail->next = NULL;
          }
          temp->prev = NULL;
          delete temp;
      }
      
      
      
      void print(){
          if(head == NULL){
              cout<<"Doublylinkedlists is empty\n";
          }
          Node*temp = head;
          while(temp!=NULL){
              cout<<temp->data<<"<=>";
              temp = temp->next;
          }
          cout<<"NULL"<<endl;
      }
      
};
int main() {
	Doublyll dll;
	dll.push_front(3);
	dll.push_front(2);
	dll.push_front(1);
	
	dll.print();
	
	dll.push_back(4);
	dll.print();
	dll.pop_front();
	dll.print();
	
	dll.pop_back();
	dll.print();

}
